#!/usr/bin/env perl

use strict;
use warnings;
use File::Basename;

my $HELP = <<HELP;

  Generate the initial settings.txt file for a specified genome.

  usage: generate-settings genome
  * genome = name (hg19, mm10, etc.) or exact dir (contains genome.fa and genes.gtf)

HELP

if (!$ARGV[0]) {
	die $HELP;
}

main();

# main subroutine
sub main {
	my $genome_arg = $ARGV[0];

	# pipeline directory (the directory that this file is in)
	my $pipeline_dir = dirname(__FILE__);

	# settings file
	my $settings_file = "settings.txt";

	# check if the settings file already exists
	if ( -e $settings_file ) {
		die "\n\n ERROR: FILE $settings_file ALREADY EXISTS (DELETE IT TO GENERATE A NEW ONE) \n\n";
	}

	# set genome setting
	my $genome_dir_setting;
	my $settings_fasta;
	my $settings_gtf;
	my $fastq_screen;
	my $ref_star;
	my $strand;
	my $flat;
	my $interval_list;
	my $bowtie2;
	my $blacklist;
	my $chrom_sizes;
	my $genome_build;

	if ($genome_arg =~ m/\//) {
		# use directory if given
		$genome_dir_setting = "GENOME-DIR|${genome_arg}\n";
	}
	elsif ($genome_arg eq "hg38") {
		# use genome name if provided
		$genome_dir_setting = "GENOME-DIR|/sc/arion/projects/data-ark/Public_Unrestricted/reference_genome/Genome-fasta/H_sapiens/GRCh38/current/";
		$settings_fasta = "REF-FASTA|/sc/arion/projects/data-ark/Public_Unrestricted/reference_genome/Genome-fasta/H_sapiens/GRCh38/current/Homo_sapiens.GRCh38.dna.primary_assembly.fa";
		$settings_gtf="REF-GTF|/sc/arion/projects/data-ark/Public_Unrestricted/reference_genome/Annotation/Gencode/Human/GRCh38/current/gencode.v40.primary_assembly.annotation.gtf";
		$fastq_screen="REF-FASTQSCREEN|/sc/arion/projects/naiklab/ikjot/reference_files/fastq_screen.conf";
		$ref_star="REF-STAR|/sc/arion/projects/naiklab/ikjot/reference_files/STAR-human";
		$strand="EXP-STRAND|unstr"; # Set to unstr by default
		$flat="REF-REFFLAT|/sc/arion/projects/naiklab/ikjot/reference_files/hg38/refFlat.txt.gz";
		$interval_list="RRNAINTERVALLIST|/sc/arion/projects/naiklab/ikjot/reference_files/hg38/hg38_rRNA.list";
		$bowtie2="REF-BOWTIE2/sc/arion/projects/naiklab/ikjot/reference_files/bowtie2_hg38_index/human_bowtie2_index";
		$blacklist="REF-BLACKLIST|/sc/arion/projects/naiklab/ikjot/reference_files/blacklist_files/hg38.blacklist.bed";
		$chrom_sizes="REF-CHROMSIZES|/sc/arion/projects/naiklab/ikjot/reference_files/Chrom_sizes/hg38.chrom.sizes";
		$genome_build="REF-GENOMEBUILD|hg38";
	}
	elsif ($genome_arg eq "mm10") {
		# use genome name if provided
		$genome_dir_setting = "GENOME-DIR|/sc/arion/projects/data-ark/Public_Unrestricted/reference_genome/Genome-fasta/M_musculus/GRCm39/current/";	
		$settings_fasta = "REF-FASTA|/sc/arion/projects/data-ark/Public_Unrestricted/reference_genome/Genome-fasta/M_musculus/GRCm39/current/Mus_musculus.GRCm39.dna.primary_assembly.fa";
		$settings_gtf="REF-GTF|/sc/arion/projects/data-ark/Public_Unrestricted/reference_genome/Annotation/Gencode/Mouse/GRCm39/current/gencode.vM29.primary_assembly.annotation.gtf";
		$fastq_screen="REF-FASTQSCREEN|/sc/arion/projects/naiklab/ikjot/reference_files/fastq_screen.conf";
		$ref_star="REF-STAR|/sc/arion/projects/naiklab/ikjot/reference_files/STAR-mouse";
		$strand="EXP-STRAND|unstr"; # Set to unstr by default
		$flat="REF-REFFLAT|/sc/arion/projects/naiklab/ikjot/reference_files/mm10/refFlat.txt.gz";
		$interval_list="RRNAINTERVALLIST|/sc/arion/projects/naiklab/ikjot/reference_files/mm10/mm10_rRNA.list";
		$bowtie2="REF-BOWTIE2|/sc/arion/projects/naiklab/ikjot/reference_files/bowtie2_mm10_index/mouse_bowtie2_index";
		$blacklist="REF-BLACKLIST|/sc/arion/projects/naiklab/ikjot/reference_files/blacklist_files/mm10.blacklist.bed";
		$chrom_sizes="REF-CHROMSIZES|/sc/arion/projects/naiklab/ikjot/reference_files/Chrom_sizes/mm10.chrom.sizes";
		$genome_build="REF-GENOMEBUILD|mm10";
	}
	else {
		die "\n\n ERROR: GENOME $genome_arg NOT FOUND \n\n";
	}

	# save genome setting
	open(my $fh, ">", $settings_file);
	#print $fh $genome_setting;
	print $fh "$genome_dir_setting \n";
	print $fh "$settings_fasta \n";
	print $fh "$settings_gtf \n";
	print $fh "$fastq_screen \n";
	print $fh "$ref_star \n";
	print $fh "$strand \n";
	print $fh "$flat \n";
	print $fh "$interval_list \n";
	print $fh "$bowtie2 \n";
	print $fh "$blacklist \n";
	print $fh "$chrom_sizes \n";
	print $fh "$genome_build \n";
	close $fh;

	# get values to make sure they were set properly
	#$settings_genome = `bash ${pipeline_dir}/scripts/get-set-setting.sh $settings_file GENOME-DIR`;
	#$settings_fasta = `bash ${pipeline_dir}/scripts/get-set-setting.sh $settings_file REF-FASTA`;
	#$settings_gtf = `bash ${pipeline_dir}/scripts/get-set-setting.sh $settings_file REF-GTF`;

	# print values
	print STDERR "\n";
	print STDERR " REF DIR : $genome_dir_setting \n";
	print STDERR " REF FASTA : $settings_fasta \n";
	print STDERR " REF-GTF : $settings_gtf \n";
	print STDERR " REF-FASTQSCREEN : $fastq_screen \n";
	print STDERR " REF-STAR : $ref_star \n";
	print STDERR " EXP-STRAND : $strand \n";
	print STDERR " REF-REFFLAT : $flat \n";
	print STDERR " RRNAINTERVALLIST : $interval_list \n";
}


# end
